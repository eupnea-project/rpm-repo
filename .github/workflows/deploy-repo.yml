name: Deploying rpm repo
on:
  push:
    branches: [ "main" ]
  schedule:
    - cron: "10 0 * * *" # run at the start of every day after script repos update
  workflow_dispatch:

env:
  public_key: ${{ secrets.PUBLIC }}
  private_key: ${{ secrets.PRIVATE }}

jobs:
  check-sha:
    runs-on: ubuntu-22.04
    outputs:
      match_results: ${{ steps.check-shas.outputs.match_results }}
      combined_remote_shas: ${{ steps.check-shas.outputs.combined_remote_shas }}
    steps:
      - name: Checking out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Download remote commit shas
        id: check-shas
        run: |
          # Download remote shas
          postinstall_latest_sha=$(curl -s https://api.github.com/repos/eupnea-linux/postinstall-scripts/commits/main | jq -r '.sha')
          audio_latest_sha=$(curl -s https://api.github.com/repos/eupnea-linux/audio-scripts/commits/main | jq -r '.sha')

          # Check remote shas agains cached ones
          postinstall_match_results=$([[ "$(cat sha_cache.txt | head -1)" == "$postinstall_latest_sha" ]] && echo "true" || echo "false")
          audio_match_results=$([[ "$(cat sha_cache.txt | tail -1)" == "$audio_latest_sha" ]] && echo "true" || echo "false")

          # Compare results and determine if there was an update in any of the repos
          if [[ "$postinstall_match_results" == "true" && "$audio_match_results" == "true" ]]; then
            echo "match_results=true" >> $GITHUB_OUTPUT
          else
            echo "match_results=false" >> $GITHUB_OUTPUT
          fi

          # Add shas to output
          echo "postinstall_remote_sha=$postinstall_latest_sha" >> $GITHUB_OUTPUT
          echo "audio_remote_sha=$audio_latest_sha" >> $GITHUB_OUTPUT

  deploy-repo:
    runs-on: ubuntu-22.04
    needs: check-sha # needs for the vars from the previous job
    # Only run script when remote sha has changed, aka the results DON'T match
    if: needs.check-shas.outputs.match_results == 'false'
    steps:
      - name: Checking out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Update local commits sha file
        run: |
          combined_remote_shas=
          echo "${{ needs.check-shas.outputs.postinstall_remote_sha }}"$'\n'"${{ needs.check-shas.outputs.audio_remote_sha }}" > ./sha_cache.txt

      - name: Installing dependencies
        run: sudo apt-get install -y rpm createrepo-c

      - name: Bump version in spec file
        run: |
          CURRENT_VERSION=$(sed -n '2p' eupnea-utils.spec | sed 's/.*://' | xargs) # get current version from spec file
          NEXTVERSION=$(echo ${CURRENT_VERSION} | awk -F. -v OFS=. '{$NF += 1 ; print}') # bump version
          sed -i "2s/.*/Version:    ${NEXTVERSION}/" eupnea-utils.spec # update version in spec file

      - name: Packing rpm package
        run: rpmbuild -bb eupnea-utils.spec

      - name: Creating repo
        run: bash create-repo.sh

      - name: Updating spec fie
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          # Optional. Commit message for the created commit.
          # Defaults to "Apply automatic changes"
          commit_message: Update spec file
          # Only include needed files
          file_pattern: 'eupnea-utils.spec sha_cache.txt'

      - name: Deploying repo
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          # Optional. Commit message for the created commit.
          # Defaults to "Apply automatic changes"
          commit_message: Deploy rpm-repo
          branch: gh-pages
          create_branch: true
          # Only include needed files
          file_pattern: 'repodata/* *.rpm eupnea-utils.repo public_key.gpg eupnea-utils.spec'
          push_options: '--force'